#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Oct 21, 2017 12:34:15 AM

# http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/event-handlers.html

import sys, os, subprocess, re, shutil
import requests, json

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import editor_support

# Global variables
TEMP_DIR = '/tmp/wirespace'
UNIQUE_TOKEN = None

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    editor_support.set_Tk_var()
    top = Wirespace_Editor (root)
    editor_support.init(root, top)
    root.mainloop()

# w = None
# def create_Wirespace_Editor(root, *args, **kwargs):
#     '''Starting point when module is imported by another program.'''
#     global w, w_win, rt
#     rt = root
#     w = Toplevel (root)
#     editor_support.set_Tk_var()
#     top = Wirespace_Editor (w)
#     editor_support.init(w, top, *args, **kwargs)
#     return (w, top)

# def destroy_Wirespace_Editor():
#     global w
#     w.destroy()
#     w = None

class Wirespace_Editor:

    '''Method to connect to server and obtain UNIQUE_TOKEN'''
    def connect(self,event):
        global UNIQUE_TOKEN
        if self.Link.get()==None or self.Link.get().strip()=="":
            self.StatusBox.configure(text="Please enter a valid link.")
        else:
            if not self.Link.get().startswith("http://"):
                self.Link.insert(0,"http://")
            link=self.Link.get().split("/")
            link.insert(-1,"editor")
            link="/".join(link)
            
            try:
                response=requests.post(link,data={'action':'authenticate'})
            except:
                self.StatusBox.configure(text="Please enter a valid link or check your network connection.")
                return

            if response.status_code==200:
                self.StatusBox.configure(text="Authentication was successful.")
                data=json.loads(response.text)
                UNIQUE_TOKEN=data['token']
                self.Link.delete(0,END)
                self.Link.insert(0,"/".join(link.split("/")[:-1]))
                self.Link.configure(state="disabled")
                self.Connect.bind('<Button-1>',lambda e: None)
                self.Connect.configure(state="disabled")
                # Initialize PathBox here
                self.PathBox.configure(text=data['path'])
                # Initialize FolderContainer and FileContainer here
                for item in sorted(data['dirs']):
                    self.FolderContainer.insert(END,item)
                for item in sorted(data['files']):
                    self.FileContainer.insert(END,item)
            else:
                data=json.loads(response.text)
                self.StatusBox.configure(text=data['message'])

    '''Method to traverse directories'''
    def fetch(self,event):
        global UNIQUE_TOKEN
        if UNIQUE_TOKEN is not None:
            cur_path=cur_path=list(self.PathBox.config().get('text'))[-1]
            new_path=""
            if self.FolderContainer.get(ANCHOR)=="..":
                new_path=os.path.split(cur_path)[0]
                if new_path=="":
                    new_path=cur_path
            else:
                new_path=os.path.join(cur_path,self.FolderContainer.get(ANCHOR))
            data={'target':new_path,'action':'open','token':UNIQUE_TOKEN}
            link=self.Link.get()
            try:
                response=requests.post(link,data)
            except:
                self.StatusBox.configure(text="Some error occured while sending the request.")
                return

            if response.status_code==200:
                data=json.loads(response.text)
                # Initialize PathBox here
                self.PathBox.configure(text=data['path'])
                # Initialize FolderContainer and FileContainer here
                self.FolderContainer.delete(0,END)
                self.FileContainer.delete(0,END)
                for item in sorted(data['dirs']):
                    self.FolderContainer.insert(END,item)
                for item in sorted(data['files']):
                    self.FileContainer.insert(END,item)
                self.FolderContainer.insert(0,"..")
            else:
                result=json.loads(response.text)
                self.StatusBox.configure(text=result['message'])
                return
        else:
            self.StatusBox.configure(text="Token not identifiable.")
            return

        
    '''Method to request a file for download and open it locally'''
    def open_locally(self,event):
        if UNIQUE_TOKEN is not None:
            if self.FileContainer.get(ANCHOR)!="":
                link=self.Link.get()
                cur_path=cur_path=list(self.PathBox.config().get('text'))[-1]
                data={'token':UNIQUE_TOKEN,'target':os.path.join(cur_path,self.FileContainer.get(ANCHOR)),'action':'download'}
                try:
                    response=requests.post(link,data,stream=True)
                except:
                    self.StatusBox.configure(text="Some error occured while sending the request.")
                    return
                if not os.path.exists(os.path.join(TEMP_DIR,UNIQUE_TOKEN,cur_path)):
                    os.makedirs(os.path.join(TEMP_DIR,UNIQUE_TOKEN,cur_path))

                fname = re.findall("filename=(.+)", response.headers['content-disposition'])[0]
                
                with open(os.path.join(TEMP_DIR,UNIQUE_TOKEN,cur_path,fname), 'wb') as fd:
                    for chunk in response.iter_content(2048):
                        fd.write(chunk)

                # Open file for editing
                self.StatusBox.configure(text="Opened "+fname+" for editing/viewing.")
                subprocess.call(['xdg-open',os.path.join(TEMP_DIR,UNIQUE_TOKEN,cur_path,fname)])
            else:
                self.StatusBox.configure(text="Please select a file for editing.")
        else:
            self.StatusBox.configure(text="Authentication not complete.")

    '''Method to save the edited local files to the server'''
    def save_remotely(self,event):
        if UNIQUE_TOKEN is not None:
            if not os.path.exists(os.path.join(TEMP_DIR,UNIQUE_TOKEN)):
                self.StatusBox.configure(text="No file has been edited yet.")
                return
            link=self.Link.get()
            temp_path=os.path.join(TEMP_DIR,UNIQUE_TOKEN)
            files_unsaved={}
            for root,dirs,files in os.walk(temp_path):
                for file in files:
                    rel_path=os.path.relpath(root,temp_path)
                    files_unsaved[os.path.join(rel_path,file)]=open(os.path.join(root,file),'rb')
            data={'token':UNIQUE_TOKEN,'action':"upload"}
            try:
                response=requests.post(link,data=data,files=files_unsaved)
            except:
                self.StatusBox.configure(text="Some error occured while saving.")
            if response.status_code==200:
                self.StatusBox.configure(text="File(s) saved successfully.")
                shutil.rmtree(temp_path)
            else:
                res=json.loads(response.text)
                self.StatusBox.configure(text=res['message'])
        else:
            self.StatusBox.configure(text="Authentication not complete.")


    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font11 = "-family Ubuntu -size 10 -weight bold -slant roman "  \
            "-underline 0 -overstrike 0"
        font12 = "-family Ubuntu -size 10 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"

        top.geometry("594x450+465+181")
        top.title("Wirespace - Editor")



        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.01, rely=0.02, relheight=0.89, relwidth=0.97)
        self.Frame1.configure(relief=SUNKEN)
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief=SUNKEN)
        self.Frame1.configure(width=577)

        self.Link = Entry(self.Frame1)
        self.Link.place(relx=0.02, rely=0.02, relheight=0.07, relwidth=0.69)
        self.Link.configure(background="white")
        self.Link.configure(font="TkFixedFont")
        self.Link.configure(width=396)

        self.Connect = Button(self.Frame1)
        self.Connect.place(relx=0.71, rely=0.02, height=30, width=157)
        self.Connect.configure(activebackground="#d9d9d9")
        self.Connect.configure(text='''Connect''')
        self.Connect.configure(width=157)
        self.Connect.bind('<Button-1>',self.connect)

        self.FolderContainer = Listbox(self.Frame1)
        self.FolderContainer.place(relx=0.02, rely=0.25, relheight=0.62
                , relwidth=0.48)
        self.FolderContainer.configure(background="#c8c8c8")
        self.FolderContainer.configure(font="TkFixedFont")
        self.FolderContainer.configure(selectbackground="#004bff")
        self.FolderContainer.configure(selectmode=SINGLE)
        self.FolderContainer.configure(width=275)
        self.FolderContainer.bind('<Double-Button-1>',self.fetch)
        
        self.Edit = Button(self.Frame1)
        self.Edit.place(relx=0.02, rely=0.9, height=30, width=275)
        self.Edit.configure(activebackground="#d9d9d9")
        self.Edit.configure(text='''Edit locally''')
        self.Edit.configure(width=273)
        self.Edit.bind('<Button-1>',self.open_locally)

        self.Save = Button(self.Frame1)
        self.Save.place(relx=0.5, rely=0.9, height=30, width=275)
        self.Save.configure(activebackground="#d9d9d9")
        self.Save.configure(text='''Save remotely''')
        self.Save.bind('<Button-1>',self.save_remotely)

        self.PathBox = Message(self.Frame1)
        self.PathBox.place(relx=0.19, rely=0.12, relheight=0.05, relwidth=0.79)
        self.PathBox.configure(highlightcolor="#ffffff")
        self.PathBox.configure(text='''Not configured currently.''',anchor="w")
        self.PathBox.configure(width=457)

        self.Message3 = Message(self.Frame1)
        self.Message3.place(relx=0.02, rely=0.12, relheight=0.05, relwidth=0.17)
        self.Message3.configure(font=font11)
        self.Message3.configure(text='''Current path''')
        self.Message3.configure(width=83)

        self.FileContainer = Listbox(self.Frame1)
        self.FileContainer.place(relx=0.5, rely=0.25, relheight=0.62
                , relwidth=0.48)
        self.FileContainer.configure(background="#c8c8c8")
        self.FileContainer.configure(font="TkFixedFont")
        self.FileContainer.configure(selectbackground="#004bff")
        self.FileContainer.configure(selectmode=SINGLE)
        self.FileContainer.configure(width=275)

        self.Message4 = Message(self.Frame1)
        self.Message4.place(relx=0.02, rely=0.2, relheight=0.05, relwidth=0.48)
        self.Message4.configure(font=font12)
        self.Message4.configure(text='''Directories''')
        self.Message4.configure(width=270)

        self.Message5 = Message(self.Frame1)
        self.Message5.place(relx=0.5, rely=0.2, relheight=0.05, relwidth=0.48)
        self.Message5.configure(font=font12)
        self.Message5.configure(text='''Files''')
        self.Message5.configure(width=268)

        self.StatusBox = Message(top)
        self.StatusBox.place(relx=0.01, rely=0.93, relheight=0.04, relwidth=0.97)
        self.StatusBox.configure(text='''Ready.''',anchor="w")
        self.StatusBox.configure(width=573)

if __name__ == '__main__':
    vp_start_gui()



